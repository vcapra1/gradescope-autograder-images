#!/bin/bash

# (running as autograder)

dbg=false
if [ "$1" == "--debug" ]
then
    dbg=true
fi

# Copy submission files to testing src folder
cp -r /autograder/submission/* /autograder/testing/src

# If provided, run code re-organizer
if [ -f "/autograder/code_organize" ]
then
    /autograder/code_organize
fi

# Make the submission directory the working directory
cd /autograder/testing

# Validate the header of tests.csv
if [ $(cat /autograder/tests.csv | head -1) != "Name,Points,Type,Timeout" ]
then
    >&2 echo "Invalid format in tests.csv file (line 1)"
    exit 1
fi

# Print beginning of JSON data
if [ "$dbg" == "false" ]
then
    cat <<EOF
{
  "stdout_visibility": "hidden",
  "tests": [
EOF
fi

# Get a list of the tests
comma=""
lineno=2
testno=1
failed_required_tests=0
for test in $(cat /autograder/tests.csv | tail +2)
do
    # Validate the line
    if ! [[ $test =~ ^[A-Za-z0-9_]+:[0-9]+:[A-Za-z0-9_]+,[0-9]+(\.[0-9]+)?,(public|secret|required),[0-9]+$ ]]
    then
        >&2 echo "Invalid format in tests.csv (line $lineno)"
        exit 1
    fi

    # Get the parts of the tests from the CSV line
    fullname=$(echo $test | cut -f1 -d,)
    name=$(echo $fullname | cut -f3 -d:)
    num=$(echo $fullname | cut -f1-2 -d: | tr : _)
    module=$(echo $fullname | cut -f1 -d:)
    max_score=$(echo $test | cut -f2 -d,)
    kind=$(echo $test | cut -f3 -d,)
    time_limit=$(echo $test | cut -f4 -d,)

    # Run the test
    if $dbg
    then
        ruby test/$module/$module.rb --name $name
    else
        result=$(timeout $time_limit bash -c "ruby test/$module/$module.rb --name $name >/dev/null && echo -n \"pass\" || echo -n \"fail\"" || echo -n "timeout")

        # If this is a required test, set the flag
        if [ $kind = "required" ] && [ $result = "fail" ]
        then
            failed_required_tests=1
        fi

        if [ $kind = "required" ] && [ $result = "timeout" ]
        then
            failed_required_tests=1
        fi

        # Compute the score for this test
        output=""
        if [ $result = "fail" ]
        then
            score=0
        elif [ $result = "timeout" ]
        then
            score=0
            output="timeout"
        else
            score=$max_score
        fi

        # Compute visibility for this type of test
        if [ $kind = "secret" ]
        then
            visibility="after_due_date"
        else
            visibility="visible"
        fi
        
        # Print the results as JSON
        cat <<EOF
    $comma
    {
      "score": $score,
      "max_score": $max_score,
      "name": "$name",
      "number": "$testno",
      "output": "$output",
      "visibility": "$visibility"
    }
EOF
    fi

    comma=","
    lineno=$((lineno+1))
    testno=$((testno+1))
done

if [ "$dbg" == "false" ]
then
    if [ $failed_required_tests -ne 0 ]
    then
        # Print end of JSON data with score of 0
        cat <<EOF
  ],
  "score": 0,
  "output": "Did not pass all required tests."
}
EOF
    else
        # Print end of JSON data
        cat <<EOF
  ]
}
EOF
    fi
fi
